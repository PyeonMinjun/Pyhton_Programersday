""" Maximum subarray 1
문제 설명
최대 구간 합
문제
길이가 N 인 수열 A[1], A[2], ..., A[N] 이 주어질 때, 이 수열의 최대 구간 합을 구해보자.

힌트
구간 합이란 수열의 연속한 부분을 합한 값이다. 예를 들어 [1, 2, 3] 의 구간 합은 [1] = 1 [1, 2] = 3 [1, 2, 3] = 6 [2] = 2 [2, 3] = 5 [3] = 3 으로 총 6개가 있다. 최대 구간 합이란 이 6개중 가장 큰 합을 말한다.

수열의 원소가 모두 음수가 아니라면 당연히 최대 구간 합은 모든 원소의 합과 같다. 하지만 수열에 음수가 포함된다면 그렇지 않을 수도 있다. 예를 들어, [-1, 3, -2, 4] 의 최대 구간 합은 [3, -2, 4] = 5 이다.

그러므로 모든 구간에 대해서 구간 합을 구해서 그 중 가장 큰 구간 합을 찾아야 한다. 가능한 구간의 개수는 총 O(N^2) 개 있다.

누적 합 배열(Prefix sum array)를 사용하면 구간 합을 빠르게 구할 수 있다. 어떤 구간의 시작과 끝이 L, R (1 ≤ L ≤ R ≤ N) 일 때 누적 합 배열 P[1], P[2], ..., P[N] 을 이용하면 A[L] + A[L + 1] + ... + A[R] 을 P[R] - P[L - 1] 을 통해서 구할 수 있다.

P[L - 1] 에서 L - 1 이 배열의 인덱스를 벗어날 수도 있는 것에 유의한다.

입력
첫째 줄에 정수 N (1 ≤ N ≤ 100) 이 주어진다.

둘째 줄에 정수 A[1], A[2], ..., A[N] (-100 ≤ A[i] ≤ 100) 이 주어진다.

출력
주어진 수열의 최대 구간 합을 출력한다.

예제 입력 1
4
-1 3 -2 4
예제 출력 1
5
예제 입력 2
3
-1 -2 -3
예제 출력 2
-1
수열의 원소가 모두 음수이기 때문에 가장 큰 원소를 한 개 선택한 구간의 합이 최대 구간 합이다.

예제 입력 3
1
-100
예제 출력 3
-100
문제의 정답을 저장하는 변수를 0 으로 초기화하면 안된다. max값을 초기화 할 때는 문제의 답이 될 수 있는 최소 값 이하로 설정해야한다. """

n = int(input())
ns= list(map(int,input().split()))

L = 0
R = len(ns)
nsmax = min(ns)
    
for i in range(R): # 0 1 2 3 
    for j in range(L+1,R+1): #  1 2 3 4
        if j > len(ns):
            continue
        
        if i >= j:
            continue
        
        if sum(ns[i:j]) > nsmax:
            # print(sum(ns[i:j]),nsmax)
            nsmax = sum(ns[i:j])

print(nsmax)
                    
        